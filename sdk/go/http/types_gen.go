package http

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *HttpRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "url":
			z.URL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "proto":
			z.Proto, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Proto")
				return
			}
		case "header":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
			if z.Header == nil {
				z.Header = make(map[string][]string, zb0002)
			} else if len(z.Header) > 0 {
				for key := range z.Header {
					delete(z.Header, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Header", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]string, zb0003)
				}
				for za0003 := range za0002 {
					za0002[za0003], err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Header", za0001, za0003)
						return
					}
				}
				z.Header[za0001] = za0002
			}
		case "body":
			z.Body, err = dc.ReadBytes(z.Body)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HttpRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Proto == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Header == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Body == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "method"
	err = en.Append(0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	// write "url"
	err = en.Append(0xa3, 0x75, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.URL)
	if err != nil {
		err = msgp.WrapError(err, "URL")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "proto"
		err = en.Append(0xa5, 0x70, 0x72, 0x6f, 0x74, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteString(z.Proto)
		if err != nil {
			err = msgp.WrapError(err, "Proto")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "header"
		err = en.Append(0xa6, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.Header)))
		if err != nil {
			err = msgp.WrapError(err, "Header")
			return
		}
		for za0001, za0002 := range z.Header {
			err = en.WriteString(za0001)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
			err = en.WriteArrayHeader(uint32(len(za0002)))
			if err != nil {
				err = msgp.WrapError(err, "Header", za0001)
				return
			}
			for za0003 := range za0002 {
				err = en.WriteString(za0002[za0003])
				if err != nil {
					err = msgp.WrapError(err, "Header", za0001, za0003)
					return
				}
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "body"
		err = en.Append(0xa4, 0x62, 0x6f, 0x64, 0x79)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Body)
		if err != nil {
			err = msgp.WrapError(err, "Body")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HttpRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Proto == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Header == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Body == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "method"
	o = append(o, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.Method)
	// string "url"
	o = append(o, 0xa3, 0x75, 0x72, 0x6c)
	o = msgp.AppendString(o, z.URL)
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "proto"
		o = append(o, 0xa5, 0x70, 0x72, 0x6f, 0x74, 0x6f)
		o = msgp.AppendString(o, z.Proto)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "header"
		o = append(o, 0xa6, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72)
		o = msgp.AppendMapHeader(o, uint32(len(z.Header)))
		for za0001, za0002 := range z.Header {
			o = msgp.AppendString(o, za0001)
			o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
			for za0003 := range za0002 {
				o = msgp.AppendString(o, za0002[za0003])
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "body"
		o = append(o, 0xa4, 0x62, 0x6f, 0x64, 0x79)
		o = msgp.AppendBytes(o, z.Body)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HttpRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "url":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "proto":
			z.Proto, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Proto")
				return
			}
		case "header":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
			if z.Header == nil {
				z.Header = make(map[string][]string, zb0002)
			} else if len(z.Header) > 0 {
				for key := range z.Header {
					delete(z.Header, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Header", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]string, zb0003)
				}
				for za0003 := range za0002 {
					za0002[za0003], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Header", za0001, za0003)
						return
					}
				}
				z.Header[za0001] = za0002
			}
		case "body":
			z.Body, bts, err = msgp.ReadBytesBytes(bts, z.Body)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HttpRequest) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Method) + 4 + msgp.StringPrefixSize + len(z.URL) + 6 + msgp.StringPrefixSize + len(z.Proto) + 7 + msgp.MapHeaderSize
	if z.Header != nil {
		for za0001, za0002 := range z.Header {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += msgp.StringPrefixSize + len(za0002[za0003])
			}
		}
	}
	s += 5 + msgp.BytesPrefixSize + len(z.Body)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HttpResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "status_code":
			z.StatusCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HttpResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "status"
	err = en.Append(0x82, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "status_code"
	err = en.Append(0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatusCode)
	if err != nil {
		err = msgp.WrapError(err, "StatusCode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HttpResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "status"
	o = append(o, 0x82, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	// string "status_code"
	o = append(o, 0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.StatusCode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HttpResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "status_code":
			z.StatusCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HttpResponse) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Status) + 12 + msgp.IntSize
	return
}
